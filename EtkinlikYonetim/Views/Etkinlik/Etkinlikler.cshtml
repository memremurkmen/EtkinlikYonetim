@model IEnumerable<EyEtkinlik>

@{
    ViewData["Title"] = "Etkinlikler";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">
    <p>
        <h1>Etkinlikler</h1>
        @*<input type="button" class="btn btn-success" onclick="location.href='@Url.Action("EtkinlikOlustur", "Etkinlik")'" value="Yeni Etkinlik Oluştur" />*@
    </p>

    @(Html.Kendo().Grid(Model)
               .Name("Grid")
               .Columns(columns =>
               {
                   columns.Bound(c => c.EtkinlikAdi).Title("Etkinlik Adı");
                   columns.Bound(c => c.MaxKatilimciSayisi).Title("Max Katılımcı Sayısı");
                   columns.Bound(c => c.BaslangicTarihi).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Başlangıç Tarihi");
                   columns.Bound(c => c.BitisTarihi).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Bitiş Tarihi");
                   columns.Bound(c => c.updateDate).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Güncellenme Tarihi");
                   columns.Bound(c => c.deleteDate).Format("{0:dd/MM/yyyy HH:mm:ss}").Title("Silinme Tarihi");
                   columns.Bound(c => c.isDeleted).Title("Silindi").ClientTemplate("<span id='badge_#=EtkinlikId#' class='badgeTemplate'></span>");
                   columns.Command(command => {
                       command.Edit();
                       //command.Destroy();
                       command.Custom("Qr Kod Okut").IconClass("k-icon k-i-qr-code").Click("qrKodOkut");
                       command.Custom("Düzenle Sayfası").IconClass("k-icon k-i-edit").Click("etkinlikDuzenle");
                       command.Custom("Sil").IconClass("k-icon k-i-close").Click("etkinlikSil");
                   }).Width(500); ;
               })
               .ToolBar(toolBar =>
               {
                   toolBar.Create().Text("Etkinlik Ekle");
               })
               .Editable(editable => editable.Mode(GridEditMode.PopUp))
               .Events(events => events.DataBound("onDataBound"))
               .Pageable()
               .Sortable(true)
               .Filterable()
               .ClientDetailTemplateId("template")
               .DataSource(dataSource => dataSource
                   .Ajax()
                   //.Batch(true)
                   .PageSize(10)
                   .Model(model =>
                   {
                       model.Id(p => p.EtkinlikId);
                       model.Field(p => p.EtkinlikAdi);
                       model.Field(p => p.MaxKatilimciSayisi);
                       model.Field(p => p.BaslangicTarihi);
                       model.Field(p => p.BitisTarihi);
                       model.Field(p => p.updateDate).Editable(false).DefaultValue(null);
                       model.Field(p => p.deleteDate).Editable(false).DefaultValue(null);
                       model.Field(p => p.isDeleted).Editable(false).DefaultValue(false);
                   })
                   //.Events(events => events.Error("error_handler"))
                   .Create(update => update.Action("EditingPopup_CreateEtkinlik", "Etkinlik"))
                   .Update(update => update.Action("EditingPopup_UpdateEtkinlik", "Etkinlik"))
                   //.Update(update => update.Action("Editing_UpdateEtkinlik", "Etkinlik"))
                   //.Destroy(update => update.Action("EditingInline_Destroy", "Etkinlik"))
                   .ServerOperation(false)
               )

)
</div>
<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=EtkinlikId#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Davetliler").Content(@<text>
                    @(Html.Kendo().Grid<EyEtkinlikKullaniciEslesme>()
                            .Name("grid_#=EtkinlikId#")
                            .Columns(columns =>
                            {
                                columns.Bound(o => o.Kullanici.Ad);
                                columns.Bound(o => o.Kullanici.Soyad);
                                columns.Bound(o => o.Kullanici.TcNo);
                                columns.Command(command =>
                                {
                                    command.Custom("Davetli Sil").IconClass("k-icon k-i-close").Click("davetliSil");
                                });
                            })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .PageSize(5)
                                .Read(read => read.Action("HierarchyBinding_Kullanicilar", "Kullanici", new { etkinlikId = "#=EtkinlikId#" }))
                            )
                            .Pageable()
                            .Sortable()
                            .ToClientTemplate()
                     )
                </text>);
                items.Add().Text("Etkinlik Detay").Content(
                     "<div class='etkinlik-details'>" +
                         "<ul>" +
                             "<li><label><strong>Etkinlik Adı:</strong></label> #= EtkinlikAdi #</li>" +
                             "<li><label><strong>Max Katılımcı Sayısı:</strong></label> #= MaxKatilimciSayisi #</li>" +
                             "<li><label><strong>Başlangıç Tarihi:</strong></label> #= BaslangicTarihi #</li>" +
                             "<li><label><strong>Bitiş Tarihi:</strong></label> #= BitisTarihi #</li>" +
                         "</ul>" +
                     "</div>"
                 );
            }).ToClientTemplate())


</script>
<script type="text/javascript">
    kendo.culture("es-ES");
    function onDataBound(e) {
        //this.expandRow(this.tbody.find("tr.k-master-row").first());
        var grid = this;
        grid.table.find("tr").each(function () {
            var dataItem = grid.dataItem(this);
            var themeColor = dataItem.isDeleted ? 'error' : 'success';
            var text = dataItem.isDeleted ? 'Silindi' : 'Silinmedi';

            $(this).find('script').each(function () {
                eval($(this).html());
            });

            $(this).find(".badgeTemplate").kendoBadge({
                themeColor: themeColor,
                text: text,
            });


            kendo.bind($(this), dataItem);
        });
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function qrKodOkut(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        alert(model.EtkinlikId);
        window.location.href = "@Url.Action("QrCodeRead", "Etkinlik")/" + model.EtkinlikId;
    }
    function etkinlikDuzenle(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("EtkinlikDuzenle", "Etkinlik")/" + model.EtkinlikId;
    }
    function etkinlikDetay(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("EtkinlikDetay", "Etkinlik")/" + model.EtkinlikId;
    }
    function etkinlikSil(e) {
        var model = this.dataItem($(e.currentTarget).closest("tr"));
        if (!model.isDeleted) {
            swal({
                title: 'Emin misiniz?',
                text: "Etkinliği silmek istediğinize emin misiniz?",
                icon: 'warning',
                buttons: {
                    cancel: {
                        text: "İptal",
                        value: false,
                        visible: true,
                        closeModal: true,
                        className: "",
                    },
                    confirm: {
                        text: "Sil",
                        value: true,
                        visible: true,
                        className: "",
                        closeModal: true
                    }
                }
            }).then(function (value) {
                if (value) {
                    $.ajax({
                        url: "@Url.Action("EtkinlikSil", "Etkinlik")",
                        type: 'POST',
                        data: { 'id': model.EtkinlikId },
                        success: function (response) {
                            swal({
                                title: 'İşlem Tamam!',
                                text: "Etkinlik başarıyla silindi.",
                                icon: 'success',
                                buttons: {
                                    confirm: {
                                        text: "Tamam",
                                        value: true,
                                        visible: true,
                                        className: "",
                                        closeModal: true
                                    }
                                }
                            }).then(function () {
                                location.reload();
                            })
                        },
                        error: function (response) {
                        }
                    });
                }
                else {
                    swal(
                        'İptal Edildi!',
                        'Etkinlik silinmedi.',
                        'error'
                    )
                }

            })
        }


    }

    function davetliSil(e){
        var model = this.dataItem($(e.currentTarget).closest("tr"));
            swal({
                title: 'Emin misiniz?',
                text: "Davetliyi silmek istediğinize emin misiniz?",
                icon: 'warning',
                buttons: {
                    cancel: {
                        text: "İptal",
                        value: false,
                        visible: true,
                        className: "",
                        closeModal: true,
                    },
                    confirm: {
                        text: "Sil",
                        value: true,
                        visible: true,
                        className: "",
                        closeModal: true
                    }
                }
            }).then(function (value) {
                if (value) {
                    $.ajax({
                        url: "@Url.Action("DavetliSil", "Etkinlik")",
                        type: 'POST',
                        data: {
                            'kullaniciId': model.Kullanici.KullaniciId,
                            'etkinlikId': model.Etkinlik.EtkinlikId
                        },
                        success: function (response) {
                            swal({
                                title: 'İşlem Tamam!',
                                text: "Davetli başarıyla silindi.",
                                icon: 'success',
                                buttons: {
                                    confirm: {
                                        text: "Tamam",
                                        value: true,
                                        visible: true,
                                        className: "",
                                        closeModal: true
                                    }
                                }
                            }).then(function () {
                                location.reload();
                            })
                        },
                        error: function (response) {
                        }
                    });
                }
                else {
                    swal(
                        'İptal Edildi!',
                        'Davetli silinmedi.',
                        'error'
                    )
                }
            })

    }
</script>